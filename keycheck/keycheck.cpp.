/*  # # #   # # #  # # #  # # # #       # # # #     #       #        # # #   # # # #
  #     # #     # #    # #             #    # #   #        #       # * * #  #
 #       #     # #    # # # # #       # # #   # #         #       #  *  #  #  # # #
#     # #     # #    # #             #    #   #          #       # * * #  #      #
# # #   # # #  # # #  # # # #       # # #    #          # # # #  # # #    # # # # */

//keycheck.cpp VERSION 1.0.0

#include "keycheck.hpp"

#define NUMBER_CONST 48 //число для перевода из char в int

void kc_log::KeyCheck::deleteSymbol(char array[], int position, int &arrayLenght)
{
    for (size_t i = position; i < arrayLenght - 1; i++)
    {
        array[i] = array[i+1];
    }

    arrayLenght--;
}

int kc_log::KeyCheck::checkKey(std::string &_key)
{
    int keySize = 0;

    keySize = _key.length();

    if (keySize != 12)
    {
        error_message:

        std::cout << "Error! Your key is incorrect!\n";
        return 1;
    }
    else
    {   
        if (!scanKey(_key))
        {
            goto error_message;
        }
    }

    std::cout << "Successful! Your key is correct!";
    return 0;
}

bool kc_log::KeyCheck::scanKey(std::string &_key)
{
    char letters[9];
    int numbers[5], numberPosition = 0, letterPosition = 0;

    for (size_t i = 0; i < 13; i++)
    {
        if (!isalpha(_key[i]))
        {
            numbers[numberPosition] = _key[i] - NUMBER_CONST;

            numberPosition++;
        }
        else
        {
            letters[letterPosition] = _key[i];

            letterPosition++;
        }   
    }

    numbers[4] = '\0';

    if (!checkNumbers(numbers))
    {
        return false;
    }
    
    if (!checkLetters(letters))
    {
        return false;
    }

    return true;    
}

bool kc_log::KeyCheck::checkLetters(char letters[9])
{
    char highLetters[27] = {"QWERTYUIOPASDFGHJKLZXCVBNM"};
    char lowLetters[27] = {"qwertyuiopasdfghjklzxcvbnm"};

    int lettersCount = 26;

    bool noLetter = true;

    std::cout << "\nLetters: ";
    for (size_t i = 0; i < 8; i++)
    {
        std::cout << letters[i] << " ";
    }
    
    std::cout << "\n\n";

    for (size_t i = 0; i < 8; i++)
    {
        for (size_t j = 0; j < lettersCount; j++)
        {
            if (letters[i] == highLetters[j])
            {
                noLetter = false;
                break;
            }
        }  

        if (noLetter)
        {
            for (size_t j = 0; j < lettersCount; j++)
            {
                if (letters[i] == highLetters[j])
                {
                    noLetter = false;
                    break;
                }
            } 

            std::cout << "Letter is not found!\n";
            return false;
        }
        
    }    

    return true;
}

bool kc_log::KeyCheck::checkNumbers(int numbers[5])
{
    int sum = 0;

    std::cout << "Numbers: ";
    for (size_t i = 0; i < 4; i++)
    {
        std::cout << numbers[i] << " ";
    }

    std::cout << '\n';

    sum = numbers[0] + numbers[1] + numbers[2];

    if (sum < 17)
    {
        if ((sum + numbers[3] != 17))
        {
            return false;
        }
    }
    else if (sum > 17)
    {
        if ((sum - numbers[3] != 17))
        {
            return false;
        }
    }
    else
    {
        if (numbers[3] != 0)
        {
            return false;
        }
    }
    
    return true;
}